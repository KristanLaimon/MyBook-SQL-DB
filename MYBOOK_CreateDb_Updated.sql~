IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = 'MYBOOK')
  BEGIN
      CREATE DATABASE MYBOOK;
	  PRINT '=== Creando base de datos MYBOOK ===';
  END
ELSE
BEGIN
  PRINT '=== La base de datos MYBOOK ya existe. ===';
 END
GO

USE MYBOOK;

------------------------------------
-- Users table and related tables --
------------------------------------
CREATE TABLE Roles( -- =======================================================
                      ID CHAR(2) PRIMARY KEY,
                      Name VARCHAR(20) UNIQUE NOT NULL,
                      Priority TINYINT UNIQUE NOT NULL,

                      constraint CK_userRoles_ID check(LEN(ID) = 2),
                      constraint CK_userRoles_name check(LEN(Name) > 0),
                      constraint CK_userRoles_priority check(Priority > 0)
);

INSERT INTO Roles (ID, Name, Priority) VALUES ('AD', 'Administrator', 1);
INSERT INTO Roles (ID, Name, Priority) VALUES ('MG', 'Manager', 2);
INSERT INTO Roles (ID, Name, Priority) VALUES ('ED', 'Editor', 3);
INSERT INTO Roles (ID, Name, Priority) VALUES ('VW', 'Viewer', 4);
INSERT INTO Roles (ID, Name, Priority) VALUES ('GT', 'Guest', 5);
INSERT INTO Roles (ID, Name, Priority) VALUES ('MD', 'Moderator', 6);
INSERT INTO Roles (ID, Name, Priority) VALUES ('SU', 'SuperUser', 7);
INSERT INTO Roles (ID, Name, Priority) VALUES ('DV', 'Developer', 8);


CREATE TABLE Suscriptions( -- =======================================================
                             ID CHAR(2) PRIMARY KEY,
                             Name VARCHAR(30) UNIQUE,
                             Description VARCHAR(250),
                             PriceUSD DECIMAL(5,2),

                             constraint ck_suscriptions_ID check(LEN(ID) = 2),
                             constraint ck_suscriptions_name check(LEN(Name) > 0),
                             constraint ck_suscriptions_description check(LEN(Description) > 0),
                             constraint ck_suscriptions_price check(PriceUSD >= 0),
);

INSERT INTO Suscriptions (ID, Name, Description, PriceUSD) VALUES ('BP', 'Basic Plan', 'Limited access to basic content', 9.99);
INSERT INTO Suscriptions (ID, Name, Description, PriceUSD) VALUES ('PP', 'Premium Plan', 'Full access to all content and features', 19.99);
INSERT INTO Suscriptions (ID, Name, Description, PriceUSD) VALUES ('FP', 'Family Plan', 'Plan for 4 members with full access', 29.99);
INSERT INTO Suscriptions (ID, Name, Description, PriceUSD) VALUES ('SP', 'Student Plan', 'Discounted plan for students', 4.99);
INSERT INTO Suscriptions (ID, Name, Description, PriceUSD) VALUES ('EP', 'Enterprise Plan', 'Plan for businesses with multiple users', 49.99);
INSERT INTO Suscriptions (ID, Name, Description, PriceUSD) VALUES ('PR', 'Pro Plan', 'Professional access with advanced tools', 14.99);
INSERT INTO Suscriptions (ID, Name, Description, PriceUSD) VALUES ('TP', 'Trial Plan', '7-day free trial', 0.00);
INSERT INTO Suscriptions (ID, Name, Description, PriceUSD) VALUES ('OP', 'One-Time Purchase', 'One-time payment for full access', 99.99);


CREATE TABLE Users( -- =======================================================
    ID INT PRIMARY KEY IDENTITY(1,1),
    Name VARCHAR(20) UNIQUE NOT NULL,
    PasswordHash CHAR(64) NOT NULL,
    Email VARCHAR(30) UNIQUE NOT NULL,
    IsVerified BIT DEFAULT 0 NOT NULL, -- Default 0 (false)
    RoleID CHAR(2) NOT NULL,
    SubscriptionID CHAR(2) NOT NULL,
    RenewSuscriptionDate DATETIME2 NOT NULL

    CONSTRAINT FK_User_Role FOREIGN KEY (RoleID) REFERENCES Roles(ID),
    CONSTRAINT FK_User_Suscription FOREIGN KEY (SubscriptionID) REFERENCES Suscriptions(ID),
    CONSTRAINT CK_Users_Name CHECK (LEN(Name) > 0),
    CONSTRAINT CK_Users_Password CHECK (LEN(PasswordHash) = 64),
    CONSTRAINT CK_Users_Email CHECK (LEN(Email) > 0)
);

INSERT INTO Users (Name, PasswordHash, Email, IsVerified, RoleID, SubscriptionID, RenewSuscriptionDate) VALUES ('Alice', 'a' + REPLICATE('a', 63), 'alice@example.com', 1, 'AD', 'BP', '2025-02-10 10:00:00');
INSERT INTO Users (Name, PasswordHash, Email, IsVerified, RoleID, SubscriptionID, RenewSuscriptionDate) VALUES ('Bob', 'b' + REPLICATE('b', 63), 'bob@example.com', 1, 'MG', 'PP', '2025-03-01 12:00:00');
INSERT INTO Users (Name, PasswordHash, Email, IsVerified, RoleID, SubscriptionID, RenewSuscriptionDate) VALUES ('Charlie', 'c' + REPLICATE('c', 63), 'charlie@example.com', 0, 'ED', 'FP', '2025-05-01 12:00:00');
INSERT INTO Users (Name, PasswordHash, Email, IsVerified, RoleID, SubscriptionID, RenewSuscriptionDate) VALUES ('David', 'd' + REPLICATE('d', 63), 'david@example.com', 0, 'VW', 'SP', '2025-07-01 08:00:00');
INSERT INTO Users (Name, PasswordHash, Email, IsVerified, RoleID, SubscriptionID, RenewSuscriptionDate) VALUES ('Eve', 'e' + REPLICATE('e', 63), 'eve@example.com', 1, 'GT', 'EP', '2025-09-01 10:00:00');
INSERT INTO Users (Name, PasswordHash, Email, IsVerified, RoleID, SubscriptionID, RenewSuscriptionDate) VALUES ('Frank', 'f' + REPLICATE('f', 63), 'frank@example.com', 1, 'MD', 'PR', '2025-12-15 09:00:00');
INSERT INTO Users (Name, PasswordHash, Email, IsVerified, RoleID, SubscriptionID, RenewSuscriptionDate) VALUES ('Grace', 'g' + REPLICATE('g', 63), 'grace@example.com', 0, 'SU', 'TP', '2025-04-10 11:00:00');
INSERT INTO Users (Name, PasswordHash, Email, IsVerified, RoleID, SubscriptionID, RenewSuscriptionDate) VALUES ('Hank', 'h' + REPLICATE('h', 63), 'hank@example.com', 1, 'DV', 'OP', '2025-06-01 08:00:00');


CREATE TABLE User_User_Suscribe( -- =======================================================
    SuscriberID INT NOT NULL,
    SuscribedToID INT NOT NULL,
    SuscriptionDate DATETIME2 NOT NULL DEFAULT GETDATE(),

    CONSTRAINT PK_User_Suscriber PRIMARY KEY (SuscriberID, SuscribedToID),
    CONSTRAINT FK_Suscriber FOREIGN KEY (SuscriberID) REFERENCES Users(ID),
    CONSTRAINT FK_SuscribedTo FOREIGN KEY (SuscribedToID) REFERENCES Users(ID),
    CONSTRAINT CK_User_Follows_Themself CHECK (SuscriberID <> SuscribedToID)
);

INSERT INTO User_User_Suscribe (SuscriberID, SuscribedToID) VALUES (1, 2);
INSERT INTO User_User_Suscribe (SuscriberID, SuscribedToID) VALUES (3, 4);
INSERT INTO User_User_Suscribe (SuscriberID, SuscribedToID) VALUES (5, 6);
INSERT INTO User_User_Suscribe (SuscriberID, SuscribedToID) VALUES (6, 7);
INSERT INTO User_User_Suscribe (SuscriberID, SuscribedToID) VALUES (7, 8);
INSERT INTO User_User_Suscribe (SuscriberID, SuscribedToID) VALUES (2, 1);
INSERT INTO User_User_Suscribe (SuscriberID, SuscribedToID) VALUES (4, 5);
INSERT INTO User_User_Suscribe (SuscriberID, SuscribedToID) VALUES (8, 3);

------------------------------------
-- Books table and related tables --
------------------------------------
CREATE TABLE Genres( -- =======================================================
    ID CHAR(2) PRIMARY KEY,
    Name VARCHAR(20) UNIQUE NOT NULL,

    CONSTRAINT CK_Genres_Name CHECK (LEN(Name) > 0),
    CONSTRAINT CK_Genres_ID CHECK (LEN(ID) = 2)
);

INSERT INTO Genres (ID, Name) VALUES ('FA', 'Fantasy');
INSERT INTO Genres (ID, Name) VALUES ('SF', 'Science Fiction');
INSERT INTO Genres (ID, Name) VALUES ('MY', 'Mystery');
INSERT INTO Genres (ID, Name) VALUES ('RO', 'Romance');
INSERT INTO Genres (ID, Name) VALUES ('TH', 'Thriller');
INSERT INTO Genres (ID, Name) VALUES ('HF', 'Historical Fiction');
INSERT INTO Genres (ID, Name) VALUES ('HO', 'Horror');
INSERT INTO Genres (ID, Name) VALUES ('AD', 'Adventure');

CREATE TABLE Languages( -- =======================================================
    ID CHAR(2) PRIMARY KEY,
    Name VARCHAR(30) UNIQUE NOT NULL,

    CONSTRAINT CK_Languages_Name CHECK (LEN(Name) > 0),
    CONSTRAINT CK_Languages_ID CHECK (LEN(ID) = 2)
);

INSERT INTO Languages (ID, Name) VALUES ('EN', 'English');
INSERT INTO Languages (ID, Name) VALUES ('ES', 'Spanish');
INSERT INTO Languages (ID, Name) VALUES ('FR', 'French');
INSERT INTO Languages (ID, Name) VALUES ('DE', 'German');
INSERT INTO Languages (ID, Name) VALUES ('IT', 'Italian');
INSERT INTO Languages (ID, Name) VALUES ('PT', 'Portuguese');
INSERT INTO Languages (ID, Name) VALUES ('RU', 'Russian');
INSERT INTO Languages (ID, Name) VALUES ('JP', 'Japanese');

CREATE TABLE Books ( -- =======================================================
    ID INT PRIMARY KEY IDENTITY(1,1),
    Name VARCHAR(30) NOT NULL,
    Description VARCHAR(400) NOT NULL,
    ISBN CHAR(13) UNIQUE NOT NULL,
    Edition TINYINT DEFAULT 1 NOT NULL, -- Default 1st Edition
    IsVerified BIT DEFAULT 0 NOT NULL, -- Default 0 (false)
    PublishedUploadDate DATETIME2 NOT NULL DEFAULT GETDATE(),
    PublishedBookDate DATETIME2 NOT NULL DEFAULT GETDATE(),
    LanguageID CHAR(2) NOT NULL,
    GenreID CHAR(2) NOT NULL,
    UserUploaderID INT NOT NULL,

    CONSTRAINT CK_Book_Name CHECK (LEN(Name) > 0),
    CONSTRAINT CK_Book_Description CHECK (LEN(Description) > 0),
    CONSTRAINT CK_Book_ISBN CHECK (LEN(ISBN) = 13),
    CONSTRAINT CK_Book_PublishedBookDate CHECK(PublishedBookDate > CAST('1900-01-01 01:00:00' AS datetime2)),

    CONSTRAINT FK_Book_Language FOREIGN KEY (LanguageID) REFERENCES Languages(ID),
    CONSTRAINT FK_Book_Genre FOREIGN KEY (GenreID) REFERENCES Genres(ID),
    CONSTRAINT FK_Book_User FOREIGN KEY (UserUploaderID) REFERENCES Users(ID)
);

INSERT INTO Books (Name, Description, ISBN, PublishedBookDate, LanguageID, GenreID, UserUploaderID) VALUES ('Book 1', 'This is a description of the book.', '9781234567890', '2025-02-09 10:00:00', 'EN', 'FA', 1);
INSERT INTO Books (Name, Description, ISBN, PublishedBookDate, LanguageID, GenreID, UserUploaderID) VALUES ('Book 2', 'This is a description of the book.', '9781234567891', '2005-06-15 09:00:00', 'ES', 'SF', 2);
INSERT INTO Books (Name, Description, ISBN, PublishedBookDate, LanguageID, GenreID, UserUploaderID) VALUES ('Book 3', 'This is a description of the book.', '9781234567892', '2010-11-22 10:00:00', 'FR', 'MY', 3);
INSERT INTO Books (Name, Description, ISBN, PublishedBookDate, LanguageID, GenreID, UserUploaderID) VALUES ('Book 4', 'This is a description of the book.', '9781234567893', '2018-01-01 08:00:00', 'DE', 'RO', 4);
INSERT INTO Books (Name, Description, ISBN, PublishedBookDate, LanguageID, GenreID, UserUploaderID) VALUES ('Book 5', 'This is a description of the book.', '9781234567894', '2015-03-10 11:00:00', 'IT', 'TH', 5);
INSERT INTO Books (Name, Description, ISBN, LanguageID, GenreID, UserUploaderID) VALUES ('Book 6', 'This is a description of the book.', '9781234567895', 'PT', 'HO', 6);
INSERT INTO Books (Name, Description, ISBN, LanguageID, GenreID, UserUploaderID) VALUES ('Book 7', 'This is a description of the book.', '9781234567896', 'RU', 'AD', 7);
INSERT INTO Books (Name, Description, ISBN, LanguageID, GenreID, UserUploaderID) VALUES ('Book 8', 'This is a description of the book.', '9781234567897', 'JP', 'HF', 8);

---------------------------------------
-- Comunity table and related tables --
---------------------------------------
CREATE TABLE Communities( -- =======================================================
    BookID INT PRIMARY KEY NOT NULL,
    UserAuthorID INT NOT NULL,
    Title varchar(30) NOT NULL,
    Description varchar(250) NOT NULL,

    CONSTRAINT FK_Book_Community FOREIGN KEY (BookID) REFERENCES Books(ID),
    CONSTRAINT FK_Owner_Community FOREIGN KEY (UserAuthorID) REFERENCES Users(ID),
    CONSTRAINT CK_Communities_Title CHECK (LEN(Title) > 0),
    CONSTRAINT CK_Communities_Description CHECK (LEN(Description) > 0)
);

INSERT INTO Communities (BookID, UserAuthorID, Title, Description)
VALUES
    (1, 1, 'First Community Ever Created', 'Hi!, this is the first community created in this app for the book "Hello World"...'),
    (2, 2, 'Fantasy Readers', 'A space to discuss epic fantasy novels and world-building.'),
    (3, 3, 'Science Explorers', 'Dive into hard science fiction and futuristic technologies.'),
    (4, 4, 'Thriller Lovers', 'Unravel mysteries and psychological thrillers together.'),
    (5, 5, 'Romance Enthusiasts', 'Share heartfelt stories and character-driven romances.'),
    (6, 1, 'Tech & Innovation', 'Explore books about cutting-edge technology and startups.'),
    (7, 2, 'Historical Deep Dives', 'Analyze historical accuracy in historical fiction.'),
    (8, 3, 'Non-Fiction Critics', 'Debate the best non-fiction works of the decade.');


CREATE TABLE Posts( -- =======================================================
    ID INT PRIMARY KEY IDENTITY (1, 1),
    DatePosted DATETIME2 NOT NULL DEFAULT GETDATE(),
    UserPosterID INT NOT NULL,
    CommunityID INT NOT NULL,
    Content VARCHAR(255) NOT NULL,
    Title VARCHAR(30) NOT NULL,

    CONSTRAINT FK_Community_Post FOREIGN KEY (CommunityID) REFERENCES Communities(BookID),
    CONSTRAINT FK_Owner_Post FOREIGN KEY (UserPosterID) REFERENCES Users(ID),
    CONSTRAINT CK_Post_Title CHECK (LEN(Title) > 0),
    CONSTRAINT CK_Post_Content CHECK (LEN(Content) > 0)
);

INSERT INTO Posts (UserPosterID, CommunityID, Content, Title)
VALUES
    (1, 1, 'Welcome to the community! Enjoy your stay.', 'Welcome'),
    (2, 2, 'Understanding the basics of SQL Server can improve your skills.', 'SQL Basics'),
    (3, 1, 'Let''s discuss the latest trends in web development and design.', 'Web Dev Trends'),
    (4, 3, 'Here are some tips and tricks for optimizing database performance.', 'DB Performance'),
    (5, 2, 'Share your experiences with migrating systems to the cloud.', 'Cloud Migration'),
    (6, 3, 'A beginner''s guide to writing and using stored procedures.', 'Stored Procedures'),
    (7, 1, 'Discussing the pros and cons of various NoSQL databases.', 'NoSQL Debate'),
    (8, 2, 'Check out the upcoming tech conferences that you shouldnt miss.', 'Tech Conferences');



CREATE TABLE Comment( -- =======================================================
    ID INT PRIMARY KEY NOT NULL IDENTITY(1,1),
    UserID INT NOT NULL,
    Content VARCHAR(400) NOT NULL,
    PostID INT NULL,
    ParentCommentID INT NULL,

    CONSTRAINT FK_Owner_Comment FOREIGN KEY (UserID) REFERENCES Users(ID),
    CONSTRAINT FK_Post_Comment FOREIGN KEY (PostID) REFERENCES Posts(ID),
    CONSTRAINT FK_Parent_Comment FOREIGN KEY (ParentCommentID) REFERENCES Comment(ID),
    CONSTRAINT CHK_References_Comment CHECK (
    (PostID IS NOT NULL OR ParentCommentID IS NOT NULL)
    AND
    (PostID IS NULL OR ParentCommentID IS NULL)
    )
);

INSERT INTO Comment (UserID, Content, PostID, ParentCommentID)
VALUES
    (1, 'This is a comment directly on the post.', 1, NULL),
    (2, 'I found this post very informative.', 2, NULL),
    (3, 'Great insights provided here!', 3, NULL),
    (4, 'I have some reservations about the post.',4, NULL),
    (5, 'I agree with your point!', NULL, 1),
    (6, 'Could you explain further?', NULL, 2),
    (7, 'Interesting perspective thanks for sharing!', NULL, 1),
    (8, 'I have a follow-up question regarding your reply.', NULL, 5);

-------------------------
-- Many to Many tables --
-------------------------
CREATE TABLE Book_User_Shelve( -- =======================================================
    BookID INT NOT NULL,
    UserID INT NOT NULL,
    IsFavorite BIT DEFAULT 0, -- False
    ShelvedDate DATETIME2 NOT NULL DEFAULT GETDATE()

    PRIMARY KEY (BookID, UserID),
    CONSTRAINT FK_User_Shelve FOREIGN KEY (UserID) REFERENCES Users(ID),
    CONSTRAINT FK_Book_Shelve FOREIGN KEY (BookID) REFERENCES Books(ID)
);

-- Good Inserts
INSERT INTO Book_User_Shelve (BookID, UserID, IsFavorite)
VALUES
    (1, 1, 0),
    (2, 2, 1),
    (3, 3, 1),
    (4, 4, 0),
    (5, 5, 1),
    (6, 6, 1),
    (7, 7, 0),
    (8, 8, 1);


CREATE TABLE Book_User_Reads( -- =======================================================
                                BookID INT NOT NULL,
                                UserID INT NOT NULL,
                                ReadTimeMiliseconds BIGINT NOT NULL,
                                ReadDate DATETIME2 NOT NULL DEFAULT GETDATE(),

                                PRIMARY KEY (BookID, UserID),
                                CONSTRAINT FK_User_Reads FOREIGN KEY (UserID) REFERENCES Users(ID),
                                CONSTRAINT FK_Book_Reads FOREIGN KEY (BookID) REFERENCES Books(ID),
                                CONSTRAINT CK_ReadTime CHECK(ReadTimeMiliseconds > 0)
);

INSERT INTO Book_User_Reads (BookID, UserID, ReadTimeMiliseconds)
VALUES
    (1, 1, 5000),
    (2, 2, 10000),
    (3, 3, 15000),
    (4, 4, 20000),
    (5, 5, 25000),
    (6, 6, 30000),
    (7, 7, 35000),
    (8, 8, 40000);



CREATE TABLE Book_User_Reviews( -- =======================================================
                                  BookID INT NOT NULL,
                                  UserID INT NOT NULL,
                                  Rating TINYINT NOT NULL,
                                  Comment varchar(400) NOT NULL

                                      PRIMARY KEY (BookID, UserID),
--                                   CONSTRAINT FK_User_Reviews FOREIGN KEY (UserID) REFERENCES Users(ID),
--                                   CONSTRAINT FK_Book_Reviews FOREIGN KEY (BookID) REFERENCES Books(ID),
                                  CONSTRAINT CK_Rating CHECK(Rating >= 0 AND Rating <= 5),
                                  CONSTRAINT CK_Book_User_Comment CHECK(LEN(Comment) >= 0)
);

INSERT INTO Book_User_Reviews (BookID, UserID, Rating, Comment)
VALUES
    (1, 1, 3, 'A solid read with engaging characters.'),
    (3, 2, 5, 'Absolutely brilliant and inspiring.'),
    (3, 3, 4, 'Very enjoyable, though a bit slow in parts.'),
    (4, 4, 2, 'Not as expected, lacking depth.'),
    (5, 5, 0, 'Did not live up to the hype.'),
    (6, 6, 1, 'Poor execution and a dull narrative.'),
    (7, 7, 4, 'Well-written with an interesting plot.'),
    (8, 8, 3, 'Good book overall, but could be better.');


CREATE TABLE User_Community_Follow( -- =======================================================
                                      UserID INT NOT NULL,
                                      CommunityID INT NOT NULL,
                                      FollowedDate DATETIME2 NOT NULL DEFAULT GETDATE(),

                                      PRIMARY KEY (UserID, CommunityID),
--                                       CONSTRAINT FK_User_Follow FOREIGN KEY (UserID) REFERENCES Users(ID),
--                                       CONSTRAINT FK_Community_Follow FOREIGN KEY (CommunityID) REFERENCES Communities(BookID)
);

INSERT INTO User_Community_Follow (UserID, CommunityID, FollowedDate)
VALUES
    (1, 1, DATEADD(YEAR, 10, GETDATE())),
    (2, 2, DATEADD(YEAR, 10, GETDATE())),
    (3, 3, DATEADD(YEAR, 10, GETDATE())),
    (4, 4, DATEADD(YEAR, 10, GETDATE())),
    (5, 5, DATEADD(YEAR, 10, GETDATE())),
    (6, 6, DATEADD(YEAR, 10, GETDATE())),
    (7, 7, DATEADD(YEAR, 10, GETDATE())),
    (8, 8, DATEADD(YEAR, 10, GETDATE()));