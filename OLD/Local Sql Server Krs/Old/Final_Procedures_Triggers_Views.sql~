
-- CREATE PROCEDURES

set ANSI_NULLS on
go
set quoted_identifier on
go

-- 1
create procedure Book_User_Reads_Insert(
    @BookID int,
    @UserID int,
    @ReadTimeMiliseconds bigint,
    @ReadDate datetime2
)
    as
begin
begin try
INSERT INTO Book_User_Reads (BookID, UserID, ReadTimeMiliseconds, ReadDate)
            values (@BookId, @Userid, @ReadTimeMiliseconds, @ReadDate)
end try
begin catch
select error_number(), error_message();
end catch
end
go

-- 2
create procedure Book_User_Reviews_Insert(
    @BookID int,
    @UserID int,
    @Rating tinyint,
    @Comment varchar(400)
)
    as
begin
begin try
INSERT INTO Book_User_Reviews (BookID, UserID, Rating, Comment)
            values (@BookId, @Userid, @Rating, @Comment)
end try
begin catch
select error_number(), error_message();
end catch
end
go

-- 3
create procedure Book_User_Shelve_Insert(
    @BookID int,
    @UserID int,
    @isFavorite bit = 0,
    @ShelvedDate datetime2
) as
begin
begin try
INSERT INTO Book_User_Shelve (BookID, UserID, IsFavorite, ShelvedDate)
            VALUES (@BookID, @UserID, @isFavorite, @ShelvedDate)
end try
begin catch
select error_number(), error_message();
end catch
end
go

-- 4
create procedure Books_Insert(
    @Name varchar(30),
    @Description varchar(400),
    @ISBN char(13),
    @Edition tinyint = 1,
    @isVerified bit = 0,
    @PublishedUploadDate datetime2,
    @PublishedBookDate datetime2,
    @LanguageID char(2),
    @GenreID char(2),
    @UserUploaderID int
) as
begin
begin try
insert into Books (Name, Description, ISBN, Edition, IsVerified, PublishedUploadDate, PublishedBookDate, LanguageID, GenreID, UserUploaderID)
            VALUES (@Name, @Description, @ISBN, @Edition, @isVerified, @PublishedUploadDate, @PublishedBookDate, @LanguageID, @GenreID, @UserUploaderID)
end try
begin catch
select error_number(), error_message();
end catch
end
go

-- 5
create procedure Comment_Insert(
    @UserID int,
    @Content varchar(400),
    @PostID int,
    @ParentCommentID int
) as
begin
begin try
INSERT INTO Comment(UserID, Content, PostID, ParentCommentID)
            VALUES (@UserID, @Content, @PostID, @ParentCommentID);
end try
begin catch
select error_number(), error_message();
end catch
end
go

-- 6
create procedure Communities_Insert(
    @BookID int,
    @UserAuthorID int,
    @Title varchar(30),
    @Description varchar(250)
)as
begin
begin try
insert into Communities(BookID, UserAuthorID, Title, Description)
            values (@BookID, @UserAuthorID, @Title, @Description);
end try
begin catch
select error_number(), error_message();
end catch
end
go

-- 7
create procedure Genres_Insert(
    @ID char(2),
    @Name varchar(20)
)as
begin
begin try
insert into Genres (ID, Name)
            values (@ID, @Name);
end try
begin catch
select error_number(), error_message();
end catch
end
go

-- 8
create procedure Languages_Insert(
    @ID char(2),
    @Name varchar(30)
)as
begin
begin try
insert into Languages (ID, Name)
            values (@ID, @Name);
end try
begin catch
select error_number(), error_message();
end catch
end

-- ================== TRIGGERS ====================

    CREATE TRIGGER Comment_InsteadOf_Insert
        ON Comment
        INSTEAD OF INSERT
        AS
    BEGIN
        DECLARE @insertedpostid INT;
        DECLARE @insertedparentcommentid INT;

        SELECT
            @insertedpostid = PostID,
            @insertedparentcommentid = ParentCommentID
        FROM inserted;

        IF (@insertedpostid IS NULL AND @insertedparentcommentid IS NULL)
            BEGIN
                THROW 50000, 'You cannot insert a new comment without PostID or ParentCommentID!', 1;
            END

        IF (@insertedpostid IS NOT NULL AND @insertedparentcommentid IS NOT NULL)
            BEGIN
                THROW 50001, 'You cannot insert a comment with both PostID and ParentCommentID at the same time!', 1;
            END

        -- Insert valid rows
        INSERT INTO Comment (UserID, Content, PostID, ParentCommentID)
        SELECT UserID, Content, PostID, ParentCommentID FROM inserted;
    END;
GO


create trigger User_CantSubscribeHimself
    on User_User_Suscribe
    instead of insert
    as
begin
    declare @Subscriber int;
    declare @Subscribed int;
    select
        @Subscriber = SuscriberID,
        @Subscribed = SuscribedToID
    from inserted

    if (@Subscriber = @Subscribed)
        begin
            throw 50001, 'User_CantSubscribeHimself', 1
        end

    insert into User_User_Suscribe (SuscriberID, SuscribedToID, SuscriptionDate)
    select SuscriberID, SuscribedToID, SuscriptionDate from inserted
end
go

-- create table UserHistoricRegistry(
--     DateJoined datetime2,
--     UserID int NOT NULL
-- );

create trigger User_AfterInsert_InsertIntoUserRegistry
    ON Users
    after insert
    as
begin
    insert into UserHistoricRegistry (DateJoined, UserID)
    select sysdatetime(), ID from inserted
end
